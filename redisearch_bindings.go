// Code generated by tygor; DO NOT EDIT.

// A k6 extension to test the performance of a Redisearch
package redisearch

import (
	"errors"
	"fmt"
	"github.com/dop251/goja"
	"go.k6.io/k6/js/modules"
	"time"
)

// k6Module represents k6 JavaScript extension module.
type k6Module struct {
	goModuleConstructor goModuleConstructor
}

// NewModuleInstance creates new per VU module instance.
func (m *k6Module) NewModuleInstance(vu modules.VU) modules.Instance {
	mi := new(k6ModuleInstance)
	adaptee := m.goModuleConstructor(vu)
	adapter := jsModuleFrom(adaptee)

	vm := vu.Runtime()

	dict := make(map[string]interface{})

	dict["Redisearch"] = vm.ToValue(newRedisearchConstructor(adaptee.newRedisearch))

	mi.exports.Named = dict

	obj := adapter.defaultRedisearchGetter(goja.FunctionCall{This: goja.Undefined()}, vm).ToObject(vm)

	mi.exports.Default = obj

	return mi
}

// register registers k6 JavaScript extension module.
func register(ctor goModuleConstructor) {
	m := new(k6Module)
	m.goModuleConstructor = ctor
	modules.Register("k6/x/redisearch", m)
}

// k6ModuleInstance represents per VU module instance.
type k6ModuleInstance struct {
	exports modules.Exports
}

// Exports returns exported symbols.
func (mi *k6ModuleInstance) Exports() modules.Exports {
	return mi.exports
}

// jsModule is the go binding for the JavaScript Module type.
//
// TSDoc:
// A k6 extension to test the performance of a Redisearch
type jsModule interface {
	// defaultRedisearchGetter is the go getter binding for the JavaScript defaultRedisearch property.
	//
	// TSDoc:
	// Default Redisearch instance.
	defaultRedisearchGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// jsModuleAdapter converts goModule to jsModule.
type jsModuleAdapter struct {
	adaptee goModule
}

var _ jsModule = (*jsModuleAdapter)(nil)

// defaultRedisearchGetter is a jsModule property getter adapter method.
func (self *jsModuleAdapter) defaultRedisearchGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.defaultRedisearchGetter()
	if err != nil {
		panic(err)
	}

	return goRedisearchToObject(v, vm)
}

// jsModuleFrom returns a jsModule based on a goModule.
func jsModuleFrom(adaptee goModule) jsModule {
	return &jsModuleAdapter{adaptee: adaptee}
}

// goModule is the go representation of the JavaScript Module type.
//
// TSDoc:
// A k6 extension to test the performance of a Redisearch
type goModule interface {
	// newRedisearch is the go factory method for the Redisearch type.
	newRedisearch(nameArg string) (goRedisearch, error)

	// defaultRedisearchGetter is the go getter method for the defaultRedisearch property.
	//
	// TSDoc:
	// Default Redisearch instance.
	defaultRedisearchGetter() (goRedisearch, error)
}

// goModuleConstructor creates new goModule instance.
type goModuleConstructor func(vu modules.VU) goModule

// jsRedisearch is the go binding for the JavaScript Redisearch type.
//
// TSDoc:
// This is the primary class of the redisearch extension.
type jsRedisearch interface {
	// greetingGetter is the go getter binding for the JavaScript greeting property.
	//
	// TSDoc:
	// Greeting message
	greetingGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// goRedisearch is the go representation of the JavaScript Redisearch type.
//
// TSDoc:
// This is the primary class of the redisearch extension.
type goRedisearch interface {
	// greetingGetter is the go getter method for the greeting property.
	//
	// TSDoc:
	// Greeting message
	greetingGetter() (string, error)
}

// jsRedisearchAdapter converts goRedisearch to jsRedisearch.
type jsRedisearchAdapter struct {
	adaptee goRedisearch
}

var _ jsRedisearch = (*jsRedisearchAdapter)(nil)

// greetingGetter is a jsRedisearch property getter adapter method.
func (self *jsRedisearchAdapter) greetingGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.greetingGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// goRedisearchAdapter converts goja Object to goRedisearch.
type goRedisearchAdapter struct {
	adaptee *goja.Object
	vm      *goja.Runtime
}

var _ goRedisearch = (*goRedisearchAdapter)(nil)

// greetingGetter is a goRedisearch property getter adapter method.
func (self *goRedisearchAdapter) greetingGetter() (string, error) {
	return self.adaptee.Get("greeting").String(), nil
}

// jsRedisearchTo setup Redisearch JavaScript object from jsRedisearch.
func jsRedisearchTo(src jsRedisearch, obj *goja.Object, vm *goja.Runtime) error {
	return obj.DefineAccessorProperty("greeting", vm.ToValue(src.greetingGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE)
}

// jsRedisearchFrom returns a jsRedisearch based on a goRedisearch.
func jsRedisearchFrom(adaptee goRedisearch) jsRedisearch {
	return &jsRedisearchAdapter{adaptee: adaptee}
}

// goRedisearchFrom returns a goRedisearch from goja Object.
func goRedisearchFrom(adaptee *goja.Object, vm *goja.Runtime) goRedisearch {
	return &goRedisearchAdapter{adaptee: adaptee, vm: vm}
}

// goRedisearchToObject returns a goja Object from goRedisearch.
func goRedisearchToObject(v goRedisearch, vm *goja.Runtime) *goja.Object {
	obj := vm.NewObject()

	err := jsRedisearchTo(jsRedisearchFrom(v), obj, vm)
	if err != nil {
		panic(err)
	}

	return obj
}

// goRedisearchConstructor creates new goRedisearch instance.
type goRedisearchConstructor func(nameArg string) (goRedisearch, error)

// newRedisearchConstructor creates Redisearch JavaScript constructor.
func newRedisearchConstructor(ctor goRedisearchConstructor) func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
	return func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
		adaptee, err := ctor(call.Argument(0).String())
		if err != nil {
			panic(err)
		}

		adapter := jsRedisearchFrom(adaptee)

		if err := jsRedisearchTo(adapter, call.This, vm); err != nil {
			panic(err)
		}

		return nil
	}
}
func goTimeFromDate(v goja.Value, vm *goja.Runtime) time.Time {
	getTime, ok := goja.AssertFunction(v.ToObject(vm).Get("getTime"))
	if !ok {
		panic(fmt.Errorf("%w: getTime", errors.ErrUnsupported))
	}

	ret, err := getTime(v)
	if err != nil {
		panic(err)
	}

	return time.UnixMilli(ret.ToInteger())
}

func jsDateFromTime(t time.Time, vm *goja.Runtime) goja.Value {
	d, err := vm.New(vm.Get("Date"), vm.ToValue(t.UnixMilli()))
	if err != nil {
		panic(err)
	}

	return d
}
